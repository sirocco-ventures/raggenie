from app.base.abstract_handlers import AbstractHandler
from typing import Any
from loguru import logger
from app.chain.formatter.general_response import Formatter

class Validator(AbstractHandler):
    """
    A handler for validating queries generated by the system.

    This class validates the generated SQL queries against the data source and returns an appropriate response
    if there are validation issues.

    Attributes:
        common_context (dict): Shared context information used for formatting responses and accessing intent-specific data.
        datasource (dict): Data source used to validate the generated SQL queries.
    """

    def __init__(self,common_context,datasource) -> None:
        """
        Initializes the Validator with the provided context and datasource.

        Args:
            common_context (dict): Shared context information used for validation and response formatting.
            datasource (dict): Data source used for query validation.
        """

        super().__init__()
        self.common_context = common_context
        self.datasource = datasource

    def handle(self, request: Any) -> str:
        """
        Validates the generated SQL query and updates the response if there are validation issues.

        Args:
            request (Any): The incoming request containing the generated query and other relevant information.

        Returns:
            str: The result of the handled request or an error message if validation fails.
        """
        logger.info("passing through => query_validator")
        response = request

        inference = request.get("inference", {})
        formated_sql = inference.get("query", "")

        if formated_sql:
            intent = self.common_context.get("intent", "")
            validator = self.datasource.get(intent, None)

            if validator:
                result = validator.validate(formated_sql)
                if result:
                    logger.critical(f"Generated Query Validation Issue: {result}")
                    return Formatter.format(result)

        return super().handle(response)
